#!/bin/bash
#need to add the set, unset functionality 
##function
function check1
{
	echo "Thsi si check1"
	if [[ ! -z value1 ]]; then 
		if [[ $value == "10" || $value -lt "10" ]]; then
        		echo "Need to be replaced";
		fi
	else
		if [[ $value == "10" || $value -lt "10" || $value1 == "90" || $value1 -gt "90" ]]; then 
			echo "Need to be replaced"
		fi
        fi
}

function check_raw
{
	echo "Thisis check_raw"
        if [[ $value -gt "100" ]]; then
        	echo "Need to be replaced";
        fi
}

function check_test
{
	echo "this is check_test";
	echo $value
	if [[ $value -gt "100" ]]; then 
		echo "Local drive need s to be replaced"
	fi
}


function check_lsi 
{
	echo "LSI card: ";
	## make necessary changes 
	#starting with reading the necessary values from  the LSI card. Since we are only interested in SSD's we are are targeting that 
	#variables need to be unset.
	/usr/local/eig_zabbix/sbin/raidcheck/bin/storcli64 /c0  show  | grep SSD | awk '{print $1"    "$2"    "$12}'  | while read total did mo;
	do
		slot_no=$(echo $total | cut -d: -f1);
		model=$(echo $mo | egrep -o "Micron|Crucial");
		for ((i=0;i<=$slot_no;i++));
		do
			didarray[i]=$did;
		done 
		for ((i=0;i<=$slot_no;i++));
		do
			if  [[ $model == "Micron" ]]; then 
				value=$(smartctl  -a -d  sat+megaraid,$i /dev/sg0 | grep  ^202 | awk '{print $4}');
				value1=$(smartctl  -a -d  sat+megaraid,$i /dev/sg0 | grep  ^202 | awk '{print $NF}');
				check1 $value $value1
			#the rest of the drives
			fi
		done 
	done
}

##main fnction
function check_raid
{
	raid=`lspci | grep -i raid | egrep -o "Adaptec|3ware|LSI"`;
	if [[ $raid == "LSI"]]; then 
		check_lsi;
	elif [[ $raid == "3ware" ]]; then 
		check_3ware;
	elif [[ $raid ==  "Adaptec" ]]; then 
		check_adap;
	else
		echo "No known controller: looking for ATA drives";
		check_ATA;
}

##main program
check_raid;


if [[ `lsscsi |grep disk | awk '{print $3}'` == "ATA" ]]; then 

#a=(`lsscsi  | awk '{print $NF}'`)
a=(/dev/sda /dev/sdb)
for i in ${a[@]}; 
do 
	echo $i; 
	name=$(echo $i | cut -d/ -f3); 
	echo $name; 
	model=$(cat /sys/block/$name/device/model | cut -d_ -f1 ); 
	model1=$(cat /sys/block/$name/device/model |awk '{print $1}');
	if [[ $model == "Kingston" ]]; then
		echo $model1 
		echo "100 ----> 1, check the field value not raw_value"
		value=$(smartctl -a $i | grep ^231| awk '{print $4}');
		check1 $value
	elif [[ $model == "sandforce" ]]; then
		echo "100 ----> 1, check the field value not raw_value"
		value=$(smartctl -a $i | grep ^231| awk '{print $4}');
		check1 $value;
	elif [[ $model == "intel" ]]; then 
		echo "100 ----> 1, check the field value not raw_value"
		value=$(smartctl -a $i | grep ^233| awk '{print $4}');
		check1 $value;
	elif [[ $model == "samsung" ]]; then 
		echo "100 ----> 1, check the field value not raw_value";
		value=$(smartctl -a $i | grep ^177| awk '{print $4}');
		check1 $value;
	elif [[ $model == "Cruial" ]]; then 
		echo "1 ----> 100, check the field value not raw_value";
		value=$(smartctl -a $i | grep ^173| awk '{print $NF}');
		check_raw $value
	elif [[ $model == "Micron" ]]; then
		value=$(smartctl -a $i | grep ^202| awk '{print $NF}');
		value1=$(smartctl -a $i | grep ^202| awk '{print $NF}');
		check1 $value
	elif [[ $model1 == "WDC" ]]; then 
		value=$(sudo smartctl -a $i | grep ^197| awk '{print $NF}');echo $value;sudo smartctl -a $i | grep ^197| awk '{print $NF}';
		check_test $value
	else 
		echo "Brand unknown. check manually"
	fi
done

elif [[ ``

